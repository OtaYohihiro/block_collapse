## やりたいこと(というか、完成品として世に出てもおかしくなくするまで)

- Player周り
  - [W中]移動時に交互に表示して、動いている感が出るようなピクセルにする。
  - [M易]画面横に来たら、飛び出ないようにする。
- メニュー周り
  - [M??]プレイ中に開けるメニュー画面。再開
  - [W易]実績解除したものの保存。 -> これ
- その他
  - [W易]score Upで、スピードアップの実装
  - [W??]テストを書く。
  - [M中]ステージを複数実装したい。
  - [M中]ブロック崩しじゃないけども、玉を打ってくるボールを実装したい。
  - [M中]たまが自機をどんな感じで狙ってくるかの実装。
  - [M難というか面倒そう]たまに当たったら、ライフが減って、0になってもGameOver.
  - [M難]アイテムとかの実装
    - 回復アイテム
    - スピードアップアイテム
    - 発射弾強化
  - [M中]Continue機能の実装
- 見た目的なやつ
  - [W??]メニューを開くおしゃれエフェクトつけたい。
  - [W??]玉が壁にあったたりしたら、ちょっと破片が飛び散る的なエフェクトをつける。

- 完了したもの
  - Player
    - X[M易]右向きの画像も作り、適用する 6/13 済
  - その他
    - X[W易]隠しコマンドで、スピードをもとに戻すやつ。 6/13済(ついでにスピードダウンも)
  - メニュー周り
    - [M??]スタート画面の実装。タイトルロゴ、スタート、終了、ハイスコア確認。
    - [M??]ゲームオーバー画面。リトライ or タイトルに戻る。
      - [M中]その時のスコアと名前を保存する。
      - 画面下までボールが行ったらゲームオーバになる。 6/15
    - [W中]実績解除を実装。
      - 一回のゲームでの壁反射回数
        - 10, 50, 100
      - ハイスコア何点以上
        - 50000, 100000, 500000
      - クリアステージ数
  - ぶつかったら音を出す：済
  - 操作するのを図形でなく画像にする：済
    - Playerを入力状況に応じて違う画像を読み込む：半分済
  - 隠しコマンド：済
  - スコア表示：済
  - [M中]接触判定Traitの実装: Traitジャなくて良いかなぁ...
    - PlayerとBallへの適用: 6/15
    - BallとBlockへの適用: 6/18
  - 見た目的なやつ
    - [W??]実績が解除されたら、0.5sくらいかけて表示されて、3s位表示されたらまた0.5sくらいかけて消える、みたいな実装をしたい。 -> んーやっぱgif画像用意して、読み込むんが良いんかなぁ...多分。イマイチだわ。
## eventの書き方参考

//fn event(_app: &App, model: &mut Model, event: Event) {
//    match event {
//        Event::WindowEvent{ id: _id, simple: window_event } => {
//            if let Some(KeyPressed(key)) = window_event {
//                match key {
//                    Key::Left => model.paddle.go(-1),
//                    Key::Right => model.paddle.go(1),
//                    Key::Down => println!("Pressed Down!!!"),
//                    _ => {},
//                }
//            }
//        }
//        _ => {},
//    }
//}


## 参考
- 色の一覧
  https://docs.rs/nannou/0.11.0/nannou/prelude/index.html#constants


## 気づいたこと
- 反射判定は左右と上下でまとめないほうが良い。ボールのスピードがあがったときに、
  壁を突き抜けて戻ってこれなくなることがあるから全て別個に判定が良い。
