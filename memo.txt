## やりたいこと(というか、完成品として世に出てもおかしくなくするまで)

- Player周り
  - [W中]移動時に交互に表示して、動いている感が出るようなピクセルにする。
  - [M易]画面横に来たら、飛び出ないようにする。
- メニュー周り
  - [M??]スタート画面の実装。タイトルロゴ、スタート、終了、ハイスコア確認。 6/14途中。
  - [M??]ゲームオーバー画面。リトライ or タイトルに戻る。 進行中
    - [M中]その時のスコアと名前を保存する。
  - [M??]プレイ中に開けるメニュー画面。再開、GiveUp,。
    - [W??]メニューを開くおしゃれエフェクトつけたい。
  - [W中]実績解除を実装。
    - 一回のゲームでの壁反射回数
    - 一回のプレイ時間
    - ハイスコア何点以上
- [W難]衝突したときに飛び散るエフェクトを入れたい
- その他
  - [W易]score Upで、スピードアップの実装
  - [W??]テストを書く。


- 完了したもの
  - Player
    - X[M易]右向きの画像も作り、適用する 6/13 済
  - その他
    - X[W易]隠しコマンドで、スピードをもとに戻すやつ。 6/13済(ついでにスピードダウンも)
  - メニュー周り
    - [M??]ゲームオーバー画面。リトライ and タイトルに戻る and ハイスコア処理 進行中
      - 画面下までボールが行ったらゲームオーバになる。 6/15
  - ぶつかったら音を出す：済
  - 操作するのを図形でなく画像にする：済
    - Playerを入力状況に応じて違う画像を読み込む：半分済
  - 隠しコマンド：済
  - スコア表示：済
- [M中]接触判定Traitの実装: Traitジャなくて良いかなぁ...
  - PlayerとBallへの適用: 6/15
  - BallとBlockへの適用: 6/18

## eventの書き方参考

//fn event(_app: &App, model: &mut Model, event: Event) {
//    match event {
//        Event::WindowEvent{ id: _id, simple: window_event } => {
//            if let Some(KeyPressed(key)) = window_event {
//                match key {
//                    Key::Left => model.paddle.go(-1),
//                    Key::Right => model.paddle.go(1),
//                    Key::Down => println!("Pressed Down!!!"),
//                    _ => {},
//                }
//            }
//        }
//        _ => {},
//    }
//}


## 参考
- 色の一覧
  https://docs.rs/nannou/0.11.0/nannou/prelude/index.html#constants


## 気づいたこと
- 反射判定は左右と上下でまとめないほうが良い。ボールのスピードがあがったときに、
  壁を突き抜けて戻ってこれなくなることがあるから全て別個に判定が良い。
